# Movie Data Fetcher Configuration
# This file contains all configurable parameters for the movie and theater data fetching script

# Movie data collection settings
movie_data:
  # Number of movies to fetch
  count: 75
  # Minimum vote count for movie to be included
  min_vote_count: 1000
  # Minimum vote average rating (out of 10)
  min_vote_average: 1.0
  # Sort order for movies
  # Options: popularity.desc, release_date.desc, vote_average.desc, revenue.desc
  sort_by: "popularity.desc"
  # Whether to download movie images
  download_images: true
  # Types of images to download (poster, backdrop, or both)
  image_types: ["poster", "backdrop"]
  # Genres to include (by ID) - leave empty for all genres
  genres_include: []
  # Genres to exclude (by ID)
  genres_exclude: []
  # Release year range filter
  release_year_start: null  # null for no limit
  release_year_end: null    # null for no limit
  # Language filter (ISO 639-1 code)
  language: "en-US"

# Theater data collection settings
theater_data:
  # Theater brands to include
  theater_brands: ["amc", "regal", "cinemark"]
  # Maximum number of cities to process (null for all cities)
  max_cities: null
  # City selection strategy
  # Options: population, random, region
  city_selection: "population"
  # Number of cities to process in each batch
  batch_size: 1600
  # Delay between cities in seconds (min and max for random range)
  delay_between_cities:
    min: 0.2
    max: 0.3
  # Delay between batches in seconds
  delay_between_batches: 0.1
  # Timeout per batch in seconds (30 minutes)
  timeout_per_batch: 1800
  # Maximum number of batches to process (null for no limit)
  max_batches: null
  # Theater generation settings
  generation:
    # Population thresholds for city sizes
    population_thresholds:
      major_metro: 1000000  # 1M+ population
      large_city: 500000    # 500K+ population
      medium_city: 100000   # 100K+ population
    # Theater counts per brand and city size
    theater_counts:
      major_metro:
        amc: [3, 8]      # Random range for number of theaters
        regal: [2, 6]
        cinemark: [2, 5]
        other: [1, 3]
      large_city:
        amc: [2, 5]
        regal: [1, 4]
        cinemark: [1, 3]
        other: [1, 2]
      medium_city:
        amc: [1, 3]
        regal: [1, 3]
        cinemark: [1, 5]
        other: [0, 1]
      small_city:
        amc: [1, 3]
        regal: [1, 2]
        cinemark: [1, 2]
        other: [0, 0]
    # Theater naming patterns
    naming_patterns:
      amc:
        major_metro: "{brand} {city} {number}"  # AMC Tampa 24
        large_city: "{brand} {city} {number}"   # AMC Tampa 16
        medium_city: "{brand} {city} {number}"  # AMC Tampa 12
        small_city: "{brand} {city} {number}"   # AMC Tampa 8
      regal:
        major_metro: "{brand} {city} {suffix} {number}"  # Regal Tampa Grande 4
        large_city: "{brand} {city} {suffix}"            # Regal Tampa Grande
        medium_city: "{brand} {city} {suffix}"           # Regal Tampa Cinema
        small_city: "{brand} {city} {suffix}"            # Regal Tampa
      cinemark:
        major_metro: "{brand} {city} {suffix} {number}"  # Cinemark Tampa Xenon 3
        large_city: "{brand} {city} {suffix}"            # Cinemark Tampa Xenon
        medium_city: "{brand} {city} {suffix}"           # Cinemark Tampa
        small_city: "{brand} {city} {suffix}"            # Cinemark Tampa
    # Available suffixes for theater names
    suffixes:
      regal: ["Cinema", "Stadium", "Grande", "Premiere", "Cineplex"]
      cinemark: ["Theater", "Movies", "Cinema", "Xenon"]
    # Theater features by city size
    features:
      major_metro: 4  # All features
      large_city: 3   # 2D, 3D, and one premium
      medium_city: 2  # 2D and 3D
      small_city: 2   # 2D and 3D
    # Available features to choose from
    available_features:
      - "2D"
      - "3D"
      - "4DX"
      - "IMAX"
    # Feature distribution rules
    feature_distribution:
      major_metro:
        "2D": 100  # All theaters have 2D
        "3D": 100  # All theaters have 3D
        "4DX": 40  # 40% have 4DX
        "IMAX": 30  # 30% have IMAX
      large_city:
        "2D": 100
        "3D": 100
        "4DX": 30
        "IMAX": 20
      medium_city:
        "2D": 100
        "3D": 100
        "4DX": 20
        "IMAX": 10
      small_city:
        "2D": 100
        "3D": 100
        "4DX": 10
        "IMAX": 5
    # Street name templates
    street_names:
      - "Main Street"
      - "Park Avenue"
      - "Market Street"
      - "Broadway"
      - "First Avenue"
      - "Second Street"
      - "Oak Street"
      - "Maple Avenue"
      - "Pine Street"
      - "Cedar Avenue"
      - "Elm Street"
      - "Washington Avenue"
      - "Lake Street"
      - "River Road"
      - "Highland Avenue"
      - "Valley View Drive"
      - "Center Street"
      - "Theater District"
      - "Entertainment Boulevard"
      - "Cinema Plaza"
      - "Movie Lane"
      - "Showtime Drive"
  # Overpass API settings
  overpass:
    # Base URL for Overpass API
    base_url: "https://overpass-api.de/api/interpreter"
    # Timeout for API requests in seconds
    timeout: 30
    # Maximum number of retries for failed requests
    max_retries: 3
    # Delay between retries in seconds
    retry_delay: 5
    # Query timeout in seconds
    query_timeout: 25
    # Whether to use area query (true) or bounding box (false)
    use_area_query: true

# Data processing settings
processing:
  # Batch size for MongoDB bulk operations
  mongodb_batch_size: 500
  # Error handling behavior
  # Options: skip, abort
  error_handling: "skip"

# Output file settings
output:
  # Base directory for all exports
  export_dir: "data"
  
  # File names for exports (will be joined with export_dir)
  file_names:
    movies: "new_movies_data.json"
    theaters: "theaters.json"
    showtimes: "showtimes.json"
  
  # JSON formatting options
  pretty_json: true  # If true, JSON files will be formatted with indentation
  export_batch_size: 1000  # Number of documents to process at once during export

# Logging settings
logging:
  # Logging level
  # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
  log_level: "INFO"
  # Whether to log to console
  log_to_console: true
  # Whether to log to file
  log_to_file: true
  # Path to log file (relative to script directory)
  log_file: "logs/movie_fetcher.log"

# Showtime generation settings
showtime_generation:
  # Operating hours configuration
  operating_hours:
    # Weekday hours (Monday-Friday)
    weekday:
      opening_time_range:
        min: "08:00"  # 8:00 AM
        max: "11:00"  # 11:00 AM
      closing_time_range:
        min: "22:00"  # 10:00 PM
        max: "02:00"  # 2:00 AM
    # Weekend hours (Saturday-Sunday)
    weekend:
      opening_time_range:
        min: "09:00"  # 9:00 AM
        max: "11:00"  # 11:00 AM
      closing_time_range:
        min: "23:00"  # 11:00 PM
        max: "03:00"  # 3:00 AM
  
  # Showtime generation settings
  showtimes:
    # Buffer time between screenings (in minutes)
    buffer_time_range:
      min: 5
      max: 15
    # Number of weeks to look back for movie releases
    release_window_weeks: 52
    # Minimum number of movies per theater
    min_movies_per_theater: 1
    # Maximum number of movies per theater (null for no limit)
    max_movies_per_theater: 20
    # Distribution of movies across theaters
    # Options: random, even, weighted
    distribution: "random"
    # Peak hours configuration (for showtime density)
    peak_hours:
      start: "17:00"  # 5:00 PM
      end: "22:00"    # 10:00 PM
      density_multiplier: 1.5  # 50% more showings during peak hours
  
  # MongoDB collection names
  collections:
    showtimes: "showtimes"
    operational_hours: "operational_hours" 